

'''

        Подвиг 2.

        На вход программе поступают целые числа, записанные через пробел.
        Прочитайте эту строку с числами и преобразуйте ее сначала в список из целых чисел,
        а затем список в кортеж из целых чисел.
        То есть, в программе будет две разные коллекции: список и кортеж.
        Отсортируйте по возрастанию значений эти коллекции методом sort, если это возможно,
        а иначе - примените функцию sorted.

        На экран ничего выводить не нужно, только сформировать две отсортированные коллекции:
        lst (список) - результат сортировки списка; tp_lst (кортеж) - результат сортировки кортежа.

        P. S. На результаты сортировок обязательно должны ссылаться переменные с именами lst и tp_lst!

        Sample Input:

        -2 -1 8 11 4 5
        Sample Output:
'''

s = '-2 -1 8 11 4 5'
lst = list(map(int, s.split()))
tp = tuple(lst)
lst.sort()
tp = sorted(tp)




'''
        Подвиг 3. 
        
        Объявите в программе функцию со следующей сигнатурой:

        def get_sort(d): ...
        На входе этой функции (в параметре d) ожидается словарь формата (пример):
        
        d = {'cat': 'кот', 'horse': 'лошадь', 'tree': 'дерево', 'dog': 'собака', 'book': 'книга'}
        Функция должна выполнить сортировку ключей словаря d по убыванию 
        (лексикографическая сортировка строк) и возвратить список из соответствующих значений ключей словаря. 
        Сам словарь d при этом должен оставаться неизменным. 
        Например, для указанного словаря d, результатом работы функции должен быть список:
        
        ['дерево', 'лошадь', 'собака', 'кот', 'книга']
        
        В программе нужно реализовать только функцию get_sort, вызывать ее не нужно и что-либо выводить на экран.
        
        Подсказка: список в функции get_sort лучше всего формировать с помощью генератора списков. 
'''
d = {'cat': 'кот', 'horse': 'лошадь', 'tree': 'дерево', 'dog': 'собака', 'book': 'книга'}

def get_sort(d):
    return [d[i] for i in sorted(d.keys(), reverse=True)]



print(get_sort(d))




'''
        Подвиг 4. 
        
        На вход программе поступают целые числа, записанных через пробел. 
        Необходимо их прочитать и выбрать из них четыре наибольших уникальных значения. 
        Результат вывести на экран в порядке их убывания в одну строчку через пробел.
        
        Sample Input:
        
        10 5 4 -3 2 0 5 10 3
        Sample Output:
        
        10 5 4 3
'''


s = '10 5 4 -3 2 0 5 10 3'

print(*sorted(set(map(int, s.split())), reverse=True)[:4])




'''
        Подвиг 5. 
        
        На вход программе поступают две последовательности целых чисел (каждая с новой строки). 
        Длины последовательностей могут быть разными. 
        Необходимо их прочитать и сохранить в отдельных списках или кортежах. 
        Затем, первый список отсортировать по возрастанию, а второй - по убыванию. 
        Полученные пары из обоих списков сложить друг с другом и получить новый список чисел. 
        Результат вывести на экран в виде строки чисел через пробел.
        
        Sample Input:
        
        7 6 4 2 6 7 9 10 4
        -4 5 10 4 5 65
        Sample Output:
        
        67 14 9 11 10 3
'''
s = '7 6 4 2 6 7 9 10 4'
s1 = '-4 5 10 4 5 65'

print(*[sum(i) for i in zip(sorted(list(map(int, s.split()))), sorted(list(map(int, s1.split())), reverse=True))])