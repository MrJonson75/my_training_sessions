'''

        Подвиг 1.

        На вход программе подаются два списка целых чисел, каждый с новой строки
        (в строке наборы чисел следующих через пробел).
        Необходимо прочитать эти наборы чисел и сохранить их в отдельных списках (или кортежах).
        Затем, с помощью множеств(а) выбрать только уникальные числа, присутствующие
        и в первом и во втором списках одновременно.
        Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел,
        используя команду (здесь s - это множество, содержащее уникальные числа):

        print(*sorted(s))

        P. S. О функции sorted мы еще будем говорить, а также об операторе *.
        Пока просто запомните такую возможность сортировки и вывода произвольных коллекций на экран.


        Sample Input:

        8 11 12 15 -2
        4 11 10 15 -5 1 -2
        Sample Output:

        -2 11 15
'''

tuple_in1 = tuple(map(int, input().split()))
tuple_in2 = tuple(map(int, input().split()))

s = set(tuple_in1) & set(tuple_in2)
print(*sorted(s))

# Вариант 2
print(*sorted(set(tuple(map(int, input().split()))) & set(tuple(map(int, input().split())))))

# Вариант 3

print(*sorted(set(input().split()) & set(input().split()), key=int))




'''
        Подвиг 2. 
        
        На вход программе подаются два списка целых чисел, каждый с новой строки 
        (в строке наборы чисел следующих через пробел). 
        Необходимо прочитать эти наборы чисел и сохранить их в отдельных списках (или кортежах). 
        Затем, с помощью множеств(а) выбрать уникальные числа, присутствующие в первом списке, 
        но отсутствующие во втором. 
        Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел, 
        используя команду (здесь s - это множество, содержащее уникальные числа):

        print(*sorted(s))

        Sample Input:
        
        8 5 3 5 -3 1
        1 2 3 4
        Sample Output:
        
        -3 5 8
'''

# tuple_in1 = tuple(map(int, input().split()))
# tuple_in2 = tuple(map(int, input().split()))

tuple_in1 = (8, 5, 3, 5, -3, 1)
tuple_in2 = (1, 2, 3, 4)

s = set(tuple_in1) - set(tuple_in2)
print(*sorted(s))

# Вариант 2

print(*sorted(set(input().split()) - set(input().split()), key=int))





'''
        Подвиг 3. 
        
        На вход программе подаются два списка целых чисел, каждый с новой строки 
        (в строке наборы чисел следующих через пробел). 
        Необходимо прочитать эти наборы чисел и сохранить их в отдельных списках (или кортежах). 
        Затем, с помощью множеств(а) выбрать уникальные числа, присутствующие 
        в первом или втором списках, но отсутствующие одновременно в обоих. 
        Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел, 
        используя команду (здесь s - это множество, содержащее уникальные числа):

        print(*sorted(s))
        
        Sample Input:
        
        1 2 3 4 5
        4 5 6 7 8
        Sample Output:
        
        1 2 3 6 7 8
'''

# tuple_in1 = tuple(map(int, input().split()))
# tuple_in2 = tuple(map(int, input().split()))

tuple_in1 = (1, 2, 3, 4, 5)
tuple_in2 = (4, 5, 6, 7, 8)

s = set(tuple_in1) ^ set(tuple_in2)
print(*sorted(s))

# Вариант 2

print(*sorted(set(input().split()) ^ set(input().split()), key=int))




'''
        Подвиг 4. 
        
        На вход программе подаются две строки со списком городов, каждый с новой строки 
        (в строках названия городов следуют через пробел). 
        Необходимо прочитать эти строки и сохранить их в отдельных списках (или кортежах). 
        Затем, с помощью множеств(а) сравнить их между собой на равенство 
        по уникальным (не повторяющимся) городам. 
        Если списки содержат одни и те же уникальные города (не важно в каком порядке), 
        то вывести на экран "ДА", иначе "НЕТ".

        Sample Input:
        
        Москва Тверь Уфа Казань Уфа Москва
        Уфа Тверь Москва Казань
        Sample Output:
        
        ДА
'''

print(["НЕТ", "ДА"][set(input().split()) == set(input().split())])





'''
        Подвиг 5. 
        
        На вход программе подаются оценки студента (его ответов у доски по предмету "Информатика") 
        в виде чисел от 2 до 5, записанных в одну строчку через пробел. 
        Необходимо прочитать эти числа. Затем, проверить, если студент имеет хотя бы одну двойку, 
        то он не допускается до экзамена. 
        Вывести на экран слово "ДОПУЩЕН", если студент не имеет ни одной двойки, 
        иначе вывести "НЕ ДОПУЩЕН". 
        
        При реализации задачи используйте множество для определения наличия двойки.


        Sample Input:
        
        3 4 4 5 2 3
        Sample Output:
        
        НЕ ДОПУЩЕН
'''


s = set(map(int, input().split()))
print(["ДОПУЩЕН", "НЕ ДОПУЩЕН"][{2} < s or {1} < s])






'''
        Подвиг 6. 
        
        На вход программе подаются две строки со списком городов, 
        которые объехал Сергей в 1-й и 2-й годы своего путешествия по России. 
        Необходимо прочитать эти наборы строк и сохранить их в отдельных списках (или кортежах). 
        Затем, требуется определить, включал ли его маршрут во 2-й год все города 1-го года путешествия? 
        Если это так, то вывести "ДА", иначе "НЕТ".

        Sample Input:
        
        Москва Казань Самара Москва
        Москва Владимир Новгород Казань Самара Москва
        Sample Output:
        
        ДА
'''
citi1 = set(input().split())
citi2 = set(input().split())
print(["НЕТ", "ДА"][citi1 & citi2 == citi1])




'''
        Подвиг 7. 
        
        На вход программе подается натуральное число, которое может содержать только 
        простые множители 1, 2, 3, 5 и 7 (любые из них, не обязательно все). 
        Необходимо прочитать это число и разложить его на простые множители. 
        Затем, проверить, содержит ли оно множители 2, 3 и 5 (обязательно все их, хотя бы один раз). 
        Если это так, то вывести "ДА", иначе "НЕТ".

        Sample Input:
        
        210
        Sample Output:
        
        ДА
'''

n = int(input())
i = 2
lst = []
while n > 1:
    if n % i == 0:
        n /= i
        lst.append(i)
    else:
        i += 1
print(lst)
print(["НЕТ", "ДА"][set(lst) >= {2, 3, 5}])

# Вариант 2
print('НЕТ' if int(input()) % 30 else 'ДА')