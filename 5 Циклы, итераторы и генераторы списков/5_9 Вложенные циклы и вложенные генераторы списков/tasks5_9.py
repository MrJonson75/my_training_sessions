'''
        Подвиг 1.

        На вход программе подается двумерная таблица из целых чисел (см. пример ниже).
        В программе уже реализовано его чтение и сохранение в двумерном списке:

        s = sys.stdin.readlines()
        lst_in = [list(map(int, x.strip().split())) for x in s]

        С помощью list comprehension необходимо преобразовать двумерный список lst_in в
        одномерный так, чтобы значения элементов шли в обратном порядке.
        Результат отобразить в виде строки из чисел, записанных через пробел.

        Sample Input:

        1 2 3 4
        5 6 7 8
        9 8 7 6
        5 4 3 2
        Sample Output:

        2 3 4 5 6 7 8 9 8 7 6 5 4 3 2 1
'''
#
# lst_in = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],
#     [9, 8, 7, 6],
#     [5, 4, 3, 2]
# ]

# [print(*[lst_in[i][j] for j in reversed(range(len(lst_in[i])))], end=" ") for i in reversed(range(len(lst_in)))]
#
# print(*(lst_in[i][j] for i in range(len(lst_in) - 1, -1, -1) for j in range(len(lst_in[0]) - 1, -1, -1)))
#
# **************************************************************




'''
        Подвиг 2. 
        
        На вход программе подаются целые числа, записанные через пробел. 
        Необходимо их прочитать и с помощью list comprehension 
        сформировать двумерный список lst размером N x N (квадратную таблицу чисел). 
        Гарантируется, что из набора введенных чисел можно сформировать квадратную матрицу (таблицу). 
        Полученный двумерный список отобразить командой:
        
        print(lst)
        
        Sample Input:
        
        1 2 3 4 5 6 7 8 9
        Sample Output:
        
        [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
'''

# lst_in = input().split()
# n = int(len(lst_in) ** 0.5)
# lst = [[int(lst_in[i*n+j]) for j in range(n)] for i in range(n)]
# print(lst)
# ******************************************************************
#
# l = list(map(int, input().split()))
# n = int(len(l)**0.5)
# it = iter(l)
# m = [[next(it) for y in range(n)] for x in range(n)]
#
# print(m)
# **********************************************************
#
# lst_in = list(map(int, input().split()))
#
# N = int(len(lst_in) ** 0.5)
#
# lst = [lst_in[i:i+N] for i in range(0, len(lst_in), N)]
#
# print(lst)
# ************************************************************


'''
        Подвиг 3. 
        
        Объявите в программе следующий список из строк:
        
        t = ["– Скажи-ка, дядя, ведь не даром",
            "Я Python выучил с каналом",
            "Балакирев что раздавал?",
            "Ведь были ж заданья боевые,",
            "Да, говорят, еще какие!",
            "Недаром помнит вся Россия",
            "Как мы рубили их тогда!"
            ]
        Необходимо преобразовать его в двумерный (вложенный) список lst, где каждая строка 
        представляется списком из слов (слова разделяются пробелом), 
        но сохранять слова только длиной более трех символов. 
        Решить данную задачу следует с использованием list comprehension. 
        Результат отобразить с помощью команды:
        
        print(lst)
        То есть, на выходе список должен быть:
        
        [['Скажи-ка,', 'дядя,', 'ведь', 'даром'], ...] 
'''

t = ["– Скажи-ка, дядя, ведь не даром",
     "Я Python выучил с каналом",
     "Балакирев что раздавал?",
     "Ведь были ж заданья боевые,",
     "Да, говорят, еще какие!",
     "Недаром помнит вся Россия",
     "Как мы рубили их тогда!"
     ]


# lst = [[j for j in i.split() if len(j) > 3] for i in t]
# print(lst)






'''
          Подвиг 4. 
          
          Повторите задачу с транспонированием прямоугольной матрицы с помощью list comprehension, 
          изложенной в видео-уроке к этой практике. 
          На вход программе поступает таблица целых чисел, чтение которой уже реализовано в программе:
          
          s = sys.stdin.readlines()
          lst_in = [list(map(int, x.strip().split())) for x in s]
          
          Нужно транспонировать список lst_in (строки заменяются на столбцы) и результат сохранить в списке A. 
          Отобразите полученный список A с помощью следующей конструкции:
          
          for row in A:
              print(*row)
          Желательно сделать эту задачу не пересматривая видео.
          
          Sample Input:
          
          1 2 3
          4 5 6
          7 8 9
          5 4 3
          Sample Output:
          
          1 4 7 5
          2 5 8 4
          3 6 9 3
'''

lst_in = [
     [1, 2, 3],
     [4, 5, 6],
     [7, 8, 9],
     [5, 4, 3]
]

A = [[j[i] for j in lst_in] for i in range(len(lst_in[len(lst_in)-1]))]

for row in A:
    print(*row)

