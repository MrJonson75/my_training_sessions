'''


        Подвиг 1.

        На вход программе подается строка.
        Необходимо ее прочитать и найти в ней все индексы строкового фрагмента "ра".
        Выведите найденные индексы на экран в одну строчку через пробел.
        Если же фрагмент "ра" отсутствует в строке, то вывести -1.


        Sample Input:

        Барабанщик бил бой в барабан

        Sample Output:

        2 23
'''

# st = input()
#
# if "ра" in st:
#     n = st.count("ра")
#     ind = 0
#     while n:
#         ind = st.index("ра", ind, len(st))
#         print(ind, end=" ")
#         n -= 1
#         ind +=1
# else:
#     print(-1)
# *********************************************************
#
# string = input().lower()
#
# if 'ра' in string:
#     for index, value in enumerate(string):
#         if string[index:index+2] == 'ра':
#             print(index, end=' ')
# else:
#     print(-1)
# ********************************************************


'''
        Подвиг 2. 
        
        На вход программе подается строка с номером телефона. 
        Ожидается следующий формат номера в строке:
        
                    +7(xxx)xxx-xx-xx
        
        где x - это любая цифра. 
        Число введенных символов считается верным 
        (то есть, не может быть, чтобы отсутствовала какая-либо цифра или была лишняя). 
        Необходимо прочитать строку из входного потока и проверить, 
        что она содержит номер телефона в соответствии с приведенным форматом. 
        Вывести "ДА", если это так и "НЕТ" в противном случае.

        Sample Input:
        
        +7(123)456-78-99
        Sample Output:
        
        ДА
'''

# input_string = list(input())
#
# standard_string = "+7(xxx)xxx-xx-xx"
# if "x" in input_string:
#     print("НЕТ")
# else:
#     for i in range(2, len(input_string)):
#         a = input_string[i]
#         if input_string[i].isdigit():
#             input_string[i] = "x"
#
#     if standard_string == "".join(input_string):
#         print("ДА")
#     else:
#         print("НЕТ")
#
# *************************************************************

# s = '+7(xxx)xxx-xx-xx'
# n = input().rjust(len(s))
# for i, item in enumerate(n):
#     if s[i] == item or s[i] == 'x' and item.isdigit():
#         continue
#     print('НЕТ')
#     break
# else:
#     print('ДА')
# ******************************************************************





'''
        Большой подвиг 3. 
        
        На вход программе подается строка, в которой записано арифметическое выражение. Например:

        "10 + 25 - 12"
        
            или
        
        "10 + 25 - 12 + 20 - 1 + 3"
        
        и т. д. То есть, количество действий может быть произвольным.
        
        Необходимо прочитать эту строку из входного потока и выполнить вычисление, 
        записанного в ней арифметического выражения. 
        Результат вычисления отобразить на экране.
        
        Полагается, что в качестве арифметических операций используется только 
        сложение (+) и вычитание (-), а в качестве операндов только целые неотрицательные числа. 
        Следует учесть, что математические операции могут быть записаны как 
        с пробелами (до и после), так и без них.
        
        P.S. В целях обучения программу следует делать без использования функции eval.
        
        Sample Input:
        
        10+25 - 12
        Sample Output:
        
        23
'''

# string_input = input().replace(" ", "")
# lst_digit = []
# operation_string =""
# operation = None
# for char in string_input:
#     if char.isdigit():
#         operation_string += char
#         continue
#     else:
#         if operation == "+" or operation is None:
#             lst_digit.append(int(operation_string))
#             operation_string = ""
#         elif operation == "-":
#             lst_digit.append(-abs(int(operation_string)))
#             operation_string = ""
#     if char == "+":
#         operation = "+"
#     elif char == "-":
#         operation = "-"
# else:
#     if operation == "+" or operation is None:
#         lst_digit.append(int(operation_string))
#         operation_string = ""
#     elif operation == "-":
#         lst_digit.append(-abs(int(operation_string)))
#         operation_string = ""
#
# print(sum(lst_digit))

# *******************************************************************

# text = input().replace(' ', '').replace('-', '+-').split('+')
# print(text)
# print(sum(map(int, text)))

# text = input()
# print(text)
# text = text.replace(' ', '')
# print(text)
# text = text.replace('-', '+-')
# print(text)
# text = text.split('+')
# print(text)




'''
        Подвиг 4. 
        
        На вход программе подаются целые числа, записанные в одну строку через пробел. 
        Необходимо прочитать эти числа и сохранить в списке. 
        Затем, каждое значение этого списка изменить на квадрат соответствующего числа. 
        Результат (список) выведите на экран в виде последовательности чисел, записанных через пробел. 
        Программу следует реализовать с использованием функции enumerate.

        Sample Input:
        
        8 -11 4 3 6
        Sample Output:
        
        64 121 16 9 36
'''

# lst = list(map(int, input().split()))
#
# for i, item in enumerate(lst):
#     lst[i] = item ** 2
#
# print(*lst)
#
# *********************************************************


'''
        Подвиг 5. 
        
        На вход программе подаются целые числа, записанные в одну строку через пробел. 
        Необходимо прочитать эти числа и сохранить в списке. 
        Затем, каждый элемент этого списка продублировать один раз. Например, для списка:
        
        [1, 2, 3]
        
        после дублирования должны получить:
        
        [1, 1, 2, 2, 3, 3]
        
        Результат (список) выведите на экран в виде последовательности чисел, записанных через пробел.
        
        
        Sample Input:
        
        8 11 2
        Sample Output:
        
        8 8 11 11 2 2
'''

# lst = list(map(int, input().split()))
# lst_out =[]
# for v in lst:
#     lst_out.append(v)
#     lst_out.append(v)
# print(*lst_out)




'''
        Подвиг 6. На вход программе подаются вещественные числа, записанные через пробел. 
        Необходимо прочитать эти числа и сохранить в списке. 
        Затем, с помощью цикла for нужно найти наименьшее число в этом списке. 
        Полученный результат (минимальное число) вывести на экран.  
        Реализовать программу без использования функции min, max и сортировки.
        
        Sample Input:
        
        8.6 9.11 -4.567 -10.0 1.45
        Sample Output:
        
        -10.0
'''

# lst = list(map(float, input().split()))
# rez = lst[0]
# for i in lst:
#     if rez > i:
#         rez = i
# print(rez)
# ***************************************************




'''
        Подвиг 7. 
        
        На вход программе подаются вещественные числа, записанные через пробел. 
        Необходимо прочитать эти числа и сохранить в списке. 
        Затем, все отрицательные значения в этом списке заменить на -1.0. 
        Результат (список) выведите на экран в виде последовательности чисел, записанных через пробел. 
        Программу следует реализовать с использованием функции enumerate.

        Sample Input:
        
        -5.67 3.5 6.89 -3.0
        Sample Output:
        
        -1.0 3.5 6.89 -1.0
'''

lst = list(map(float, input().split()))

for i, v in enumerate(lst):
    if v < 0:
        lst[i] = - 1.0
print(*lst)

'''
        
'''