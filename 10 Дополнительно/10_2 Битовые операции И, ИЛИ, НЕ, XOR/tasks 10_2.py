

'''

        Подвиг 2.

        На вход программе подается целое десятичное число.
        Прочитайте его и, используя битовые операции, включите третий бит введенного числа.
        Выведите на экран полученное числовое значение.

        P. S. Распределение номеров бит представлено на следующем рисунке.

                                11010001
        Sample Input:

        100
        Sample Output:

        108
'''
from sys import flags

# n = int(input())
# t = 8
# rez = n | t
# print(rez)




'''
        Подвиг 3. 
        
        На вход программе подается целое десятичное число. 
        Прочитайте его и, используя битовые операции, выключите 4-й и 1-й биты введенного числа. 
        Выведите на экран полученное числовое значение.

        P. S. Распределение номеров бит представлено на следующем рисунке.
        
        Sample Input:
        
        153
        Sample Output:
        
        137
'''

# n = int(input())
# flags = 18
# rez = n & ~flags
# print(rez)




'''
        Подвиг 4. 
        
        На вход программе подается целое десятичное число. 
        Прочитайте его и, используя битовые операции, 
        переключите 3-й и 0-й биты введенного числа. 
        Выведите на экран полученное числовое значение.

        P. S. Распределение номеров бит представлено на следующем рисунке.
        
        Sample Input:
        
        58
        Sample Output:
        
        51
'''

# flags = 58
# mask = 9
# rez = flags ^ mask
# print(rez)
# print(bin(flags))       #   0b111010
# print(bin(rez))         #   0b110011





'''
        Подвиг 5. 
        
        На вход программе подается целое десятичное число. 
        Прочитайте его и, используя битовые операции, выполните умножение введенного числа на 4. 
        Выведите на экран полученное числовое значение.
        
        Sample Input:
        
        40
        Sample Output:
        
        160
'''

# flags = 40
# rez = flags << 2
# print(rez)




'''
        Подвиг 6. 
        
        На вход программе подается целое десятичное число. 
        Прочитайте его и, используя битовые операции, выполните целочисленное деление 
        введенного числа на 2. Выведите на экран полученное числовое значение.

        Sample Input:
        
        22
        Sample Output:
        
        11
'''

# flags = 22
# rez = flags >> 1
# print(rez)




'''
        Подвиг 7. 
        
        На вход программе подается зашифрованное слово. 
        Шифрование кодов символов этого слова было проведено с помощью битовой 
        операции XOR с ключом key=123. 
        То есть, каждый символ был преобразован по алгоритму:

        x = ord(x) ^ key
        
        Здесь ord - функция, возвращающая код символа x. 
        Прочитайте слово из входного потока и расшифруйте его. Выведите на экран результат расшифровки.
        
        P. S. Подсказка: для преобразования кода в символ используйте функцию chr.

        Sample Input:
        
        ѩкю[щюлцхZ
        Sample Output:
        
        Все верно!
'''

s = 'ѩкю[щюлцхZ'
print("".join(map(lambda x: chr(ord(x) ^ 123), s)))




'''
        Подвиг 8. 
        
        На вход программе подается целое десятичное число. 
        Прочитайте его и, используя битовые операции, проверьте, включен ли 6-й и 3-й биты введенного числа. 
        Если они оба включены, то выведите слово "ДА", иначе - слово "НЕТ".
        
        P. S. Распределение номеров бит представлено на следующем рисунке.
        
        Sample Input:
        
        106
        Sample Output:
        
        ДА
'''