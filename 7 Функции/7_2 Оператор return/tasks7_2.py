'''
        Подвиг 1.


        Объявите в программе функцию с именем get_sq,
        которая имеет один параметр (принимает вещественное число).
        В теле функции значение параметра возводится в квадрат и возвращается функцией.

        После объявления функции прочитайте (с помощью функции input) вещественное число
        из входного потока и вызовите функцию с прочитанным значением.
        Выведите на экран число, которое возвратила функция.

        Sample Input:

        1.5
        Sample Output:

        2.25
'''



def get_sq(num):
    return num ** 2

n=float(input())
print(get_sq(n))




'''
        Подвиг 2. 
        
        Объявите функцию с именем is_triangle, 
        которая принимает три стороны треугольника (целые числа) и проверяет, 
        можно ли из переданных аргументов составить треугольник. 
        (Напомню, что у любого треугольника длина любой его стороны должна быть меньше 
        суммы двух других). 
        Если  проверка проходит, функция должна возвращать булево значение True, а иначе False.
        
        Вызывать функцию не нужно, только объявить.
        
        Sample Input:
        
        3 4 5
        Sample Output:
        
        True
'''

def is_triangle(a, b, c):
    return a +b > c and b + c > a and a + c > b and b + a > c


print(is_triangle(3, 4, 5))

# Версия 2

def is_triangle(a, b, c):
    a, b, c = sorted((a, b, c)) # в скобках кортеж
    return c < a + b

print(is_triangle(3, 4, 5))





'''
        Подвиг 3. 
        
        Объявите функцию с именем is_large, которая принимает строку (в качестве параметра) 
        и возвращает булево значение False, если длина строки меньше трех символов, иначе True.
        
        Вызывать функцию не нужно, только объявить.
        
        Sample Input:
        
        Я люблю Python!
        Sample Output:
        
        True
'''

def is_large(s: str) -> bool:
    return len(s) > 3





'''
        Подвиг 4. 
        
        Объявите в программе функцию с одним параметром для проверки переданного числа на четность. 
        Функция должна возвращать булево значение True, если переданное число четное и False, 
        в противном случае.
        
        После объявления функции в цикле на каждой итерации необходимо читать целочисленное 
        числовое значение командой:
        
        x = int(input())
        Цикл должен работать пока x не равен 1. 
        Если прочитанное значение x четное (проверяется с помощью ранее объявленной функции), 
        то число выводится на экран (каждое с новой строки).
        
        Sample Input:
        
        2
        -4
        5
        7
        10
        1
        Sample Output:
        
        2
        -4
        10
'''

def is_even(num: int) -> bool:
    return num % 2 == 0


while True:
    x = int(input())
    if x == 1:
        break
    if is_even(x):
        print(x)


# Вариант 2

def is_even(x):
    return not x % 2

[print(i) for i in iter(input, '1') if is_even(int(i))]






'''
        Подвиг 5. 
        
        Объявите в программе функцию с одним параметром для проверки переданного числа на нечетность. 
        Функция должна возвращать булево значение True, если переданное число нечетное, 
        и False в противном случае. 
        
        После объявления функции далее в программе прочитайте последовательность целых чисел, 
        подаваемых на вход программе, с помощью команды:
        
        lst_d = list(map(int, input().split()))
        
        Затем, используя генератор списков и объявленную ранее функцию, 
        сформируйте список lst из нечетных значений на основе списка lst_d. 
        Результат отобразите на экране командой:
        
        print(*lst)
        
        Sample Input:
        
        8 11 -15 3 2 10
        Sample Output:
        
        11 -15 3
'''

def is_even(n):
    return n % 2 != 0


print(*[i for i in list(map(int, input().split())) if is_even(i)])

# Вариант 2

def is_odd(n):
    res = n & 1
    return res


print(*(i for i in map(int, input().split()) if is_odd(i)))



'''
        Подвиг 6. 
        
        На вход программе подается строка (слово), которое читается в переменную tp с помощью команды:

        tp = input().strip()
        
        Если переменная tp равна строке "RECT", то следует объявить функцию с именем 
        get_sq с двумя параметрами (длина и ширина прямоугольника), 
        вычисляющую площадь прямоугольника по переданным аргументам и возвращающую вычисленное значение. 
        (Функция на экран ничего выводить не должна). 
        
        Если переменная tp не равна строке "RECT", то следует объявить функцию с тем же именем get_sq, 
        но с одним параметром  (длина стороны квадрата) для вычисления площади квадрата (формула: a*a). 
        Вычисленное значение возвращается функцией. (Функция на экран ничего выводить не должна). 
        
        Примечание: в программе должна быть задана только одна функция с именем get_sq в зависимости от 
        введенного слова (значения переменной tp). Вызывать функцию не нужно, только объявить.
        
        Sample Input:
        
        RECT
        Sample Output:
        
        10
'''

tp = input().strip()

if tp == 'RECT':
    def get_sq(a, b):
        return a*b
else:
    def get_sq(a):
        return a*a




'''
        Подвиг 7. 
        
        Объявите в программе функцию, которая имеет один параметр, принимающий строку. 
        Функция должна возвращать булево значение False, если длина переданной строки меньше 6 символов, 
        иначе возвращать булево значение True.

        После объявления функции далее в программе прочитайте из входного потока строку с 
        названиями городов, записанных через пробел. 
        Сформируйте на основе прочитанной строки список cities из названий городов. 
        Затем, используя генератор списка и ранее объявленную функцию, сформируйте новый 
        список lst из названий городов с длинами не менее шести символов 
        (города выбираются из списка cities). 
        Результат отобразите на экране командой:
        
        print(*lst)
        
        Sample Input:
        
        Москва Уфа Пермь Самара Вологда
        Sample Output:
        
        Москва Самара Вологда
'''

def check_string(string: str) -> bool:
        return len(string) >= 6


cities = input().split()
lst = [i for i in cities if check_string(i)]
print(*lst)





'''
        Подвиг 8. 
        
        Объявите функцию, которая имеет один параметр, принимающий строку. 
        Функция должна возвращать два значения в виде кортежа: переданную строку и ее длину.
        
        После объявления функции далее в программе прочитайте из входного потока 
        строку с названиями городов, записанных через пробел. 
        Сформируйте на основе прочитанной строки список cities из названий городов. 
        Затем, используя генератор словарей и ранее объявленную функцию, 
        сформируйте на основе списка cities словарь d в формате:
        
        d = {<город 1>: <число символов>, ..., <город N>: <число символов>}
        
        Выведите этот словарь в порядке возрастания длин строк с помощью команд:
        
        a = sorted(d, key=d.get)
        print(*a)
        
        Sample Input:
        
        Воронеж Лондон Тверь Омск Уфа
        Sample Output:
        
        Уфа Омск Тверь Лондон Воронеж
'''

def check_string(string: str) -> tuple:
    return string, len(string)


cities = input().split()
d = {name: len_name for name, len_name in (check_string(i) for i in cities)}
a = sorted(d, key=d.get)
print(*a)





'''
        Подвиг 9. 
        
        На вход программе подаются целые числа, записанные в одну строчку через пробел. 
        Необходимо их прочитать и сохранить в списке digs. 
        Затем (или в самом начале программы), объявить функцию, которая имеет два параметра 
        (будут передаваться максимальное и минимальное значения из сформированного списка digs) 
        и возвращающую произведение двух переданных аргументов.

        Вызовите эту функцию с передачей ей в качестве аргументов минимального и максимального 
        числового значения из списка digs. Отобразите на экране значение, возвращенное функцией.
        
        Подсказка: для передачи аргументов функции используйте стандартные функции max и min языка Python.
        
        Sample Input:
        
        56 34 -30 22 1 4 10
        Sample Output:
        
        -1680
'''

digs = list(map(int, input().split()))

def get_dig(max_dig: int, min_dig: int) -> int:
    return max_dig * min_dig

print(get_dig(max_dig=max(digs), min_dig=min(digs)))