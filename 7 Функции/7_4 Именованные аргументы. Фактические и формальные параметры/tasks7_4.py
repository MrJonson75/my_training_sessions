'''
        Подвиг 2.

        Объявите в программе функцию с именем get_rect_value,
        которая первыми двумя параметрами принимает длину и ширину прямоугольника (числа),
        а третий формальный параметр tp имеет начальное значение 0.
        Если параметр tp равен нулю, то функция должна возвращать периметр прямоугольника,
        вычисленного на основе первых двух переданных аргументов, а иначе его площадь.

        P. S. Вызывать функцию не нужно, только объявить.
'''

def get_rect_value(a, b, tp = 0):
    if tp == 0:
        return (a + b) * 2
    else:
        return a * b


'''
        Подвиг 3. 
        
        Объявите в программе функцию с именем check_password, 
        которая первым параметром принимает строку (пароль) 
        и имеет второй формальный параметр chars с начальным значением в виде строки "$%!?@#". 
        Функция должна проверять, есть ли в пароле хотя бы один символ из chars 
        и что длина пароля не менее 8 символов. 
        Если проверка проходит, то функция возвращает булево True, иначе False.

        P. S. Вызывать функцию не нужно, только объявить.
        
        Sample Input:
        
        12345678!
        Sample Output:
        
        True
'''

# def check_password(password, chars = "$%!?@#"):
#     check_psw = False
#     for symbol in password:
#         if symbol in chars and len(password) >= 8:
#             check_psw = True
#     return check_psw
#
#
# check = check_password('12345678#')
# print(check)
#
# # Вариант 2
#
# def check_password(password, chars='$%!?@#'):
#     return len(password) >= 8 and any(i in chars for i in password)
#
#
# check = check_password('12345678#')
# print(check)




'''
        Подвиг 4. 
        
        Объявите в программе функцию, которая первым параметром принимает строку (с кириллицей и латиницей) 
        и преобразовывает в ней кириллические символы в латиницу, используя следующий словарь 
        для замены русских букв на соответствующее латинское написание:

        t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
             'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
             'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
             'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
             
        Функция должна возвращать результат преобразования переданной строки в латиницу. 
        Замены делать без учета регистра (исходную строку вначале следует перевести в нижний регистр 
        - малые буквы).
        
        Второй формальный параметр функции с именем sep и начальным значением в виде строки "-". 
        Он определяет символ для замены пробелов в строке.
        
        На вход программе подается строка, которую необходимо прочитать (после объявления функции). 
        Затем, дважды вызовите функцию (с выводом результата ее работы на экран):
        
        первый раз только с прочитанной строкой;
        второй раз с прочитанной строкой и именованным аргументом sep со значением '+'.
        
        
        Sample Input:
        
        Лучший курс по Python!
        Sample Output:
        
        luchshiy-kurs-po-python!
        luchshiy+kurs+po+python!
'''

# t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
#      'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
#      'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
#      'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
#
#
# def get_slug(string, sep="-"):
#     slug = ""
#     for sim in string:
#         if sim == " ":
#             slug += sep
#             continue
#         if sim.lower() not in t.keys():
#             slug += sim.lower()
#             continue
#         for k, v in t.items():
#             if k.lower() == sim.lower():
#                 slug += v
#     return slug
# my_str = input()
# print(get_slug(my_str))
# print(get_slug(my_str, sep="+"))
#
#
# # Вариант 2
#
# # здесь продолжайте программу
# def get_slug(s, sep='-'):
#     s = s.replace(' ', sep)
#     for key, value in t.items():
#         s = s.replace(key, value)
#     return s
#
#
# my_str = input().lower()
# print(get_slug(my_str))
# print(get_slug(my_str, '+'))





'''
        Подвиг 5. 
        Объявите в программе функцию, которая первым параметром принимает строку, 
        а второй формальный параметр tag  с начальным значением в виде строки "h1" определяет тег, 
        в который должна заключаться первая переданная строка. Например, мы передаем 
        строку "Hello Python" и заключаем в тег "h1". Функция должна вернуть строку (без кавычек):

        "<h1>Hello Python</h1>"
        
        То есть, сначала открывается тег <h1>, а в конце строки - закрывается </h1>. 
        И так для любых указанных тегов.
        
        После объявления функции далее в программе прочитайте из входного потока строку 
        и дважды вызовите функцию (с выводом результата ее работы на экран):
        
        первый раз только со строкой;
        второй раз со строкой и именованным аргументом tag со значением 'div'.
        
        Sample Input:
        
        Работаем с функциями
        Sample Output:
        
        <h1>Работаем с функциями</h1>
        <div>Работаем с функциями</div>
'''

# def get_html_cod(string, tag="h1"):
#     return f"<{tag}>{string}</{tag}>"
#
#
# my_str = input()
# print(get_html_cod(my_str))
# print(get_html_cod(my_str, tag="div"))




'''
        Подвиг 6. 
        
        В функцию из предыдущего подвига 5 добавьте в конец еще один третий формальный параметр up 
        с начальным булевым значением True. 
        Если параметр up равен True, то тег, указанный в формальном параметре tag, 
        следует записывать заглавными буквами, а иначе малыми.

        После объявления функции далее в программе прочитайте из входного потока строку и 
        дважды вызовите функцию (с выводом результата ее работы на экран):
        
        первый раз со строкой и именованным аргументом tag со значением 'div';
        второй раз со строкой, именованным аргументом tag со значением 'div' 
        и именованным аргументом up со значением False.
        
        Sample Input:
        
        Python is the best!
        Sample Output:
        
        <DIV>Python is the best!</DIV>
        <div>Python is the best!</div>
'''


def get_html_cod(string, tag="h1", up=True):
    return f"<{tag.upper()}>{string}</{tag.upper()}>" if up else f"<{tag}>{string}</{tag}>"


my_str = input()
print(get_html_cod(my_str, tag="div"))
print(get_html_cod(my_str, tag="div", up=False))