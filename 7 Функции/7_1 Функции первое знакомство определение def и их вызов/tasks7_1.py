'''
        Подвиг 4.

        Объявите в программе функцию без параметров, которая читает из входного потока
        (с клавиатуры) имя и фамилию, записанные в одну строку через пробел, и выводит на экран сообщение
        (без кавычек):

        "Уважаемый, <имя> <фамилия>! Вы верно выполнили это задание!"

        После объявления вызовите эту функцию.

        Sample Input:

        Сергей Балакирев
        Sample Output:

        Уважаемый, Сергей Балакирев! Вы верно выполнили это задание!
'''


def task7_1():
    name, last_name = map(str, input().split())
    print(f"Уважаемый, {name} {last_name}! Вы верно выполнили это задание!")


# task7_1()


'''
        Подвиг 5. 
        
        Объявите в программе функцию, которая имеет один параметр - вес предмета, 
        и выводит на экран сообщение (без кавычек):
        
        "Предмет имеет вес: x кг."
        
        где x - переданное значение (аргумент) функции. 
        После объявления функции прочитайте (с помощью функции input) вещественное число и 
        вызовите функцию с этим числовым значением.
        
        Sample Input:
        
        12.67
        Sample Output:
        
        Предмет имеет вес: 12.67 кг.
'''


def get_weight(weight):
    print(f"Предмет имеет вес: {weight} кг.")


# get_weight(float(input()))


'''
        Подвиг 6. 
        
        Объявите в программе функцию, которая в качестве параметра принимает список (list), 
        находит максимальное, минимальное и сумму значений этого списка и выводит результат 
        на экран в виде строки (без кавычек):
        
        "Min = v_min, max = v_max, sum = v_sum"
        
        где v_min, v_max, v_sum - вычисленные значения минимального, максимального и суммы значений списка.
        
        После объявления функции прочитайте (с помощью функции input) список целых чисел, 
        записанных в одну строку через пробел, и вызовите функцию с передачей ей этого списка.
        
        Sample Input:
        
        8 11 5 -10 12 0
        Sample Output:
        
        Min = -10, max = 12, sum = 26
'''


def set_list(lst: list):
    print(f"Min = {min(lst)}, max = {max(lst)}, sum = {sum(lst)}")


# set_list(list(map(int, input().split())))





'''
        Подвиг 7. 
        
        Объявите в программе функцию с двумя параметрами width и height (ширина и высота прямоугольника), 
        которая выводит сообщение (без кавычек):
        
        "Периметр прямоугольника, равен x"
        
        где x - вычисленный периметр прямоугольника. 
        После объявления функции прочитайте (с помощью функции input) два целых числа, 
        записанных в одну строку через пробел, и вызовите функцию с этими числовыми значениями.
        
        Sample Input:
        
        8 11
        Sample Output:
        
        Периметр прямоугольника, равен 38
'''


# def set_perimeter(width: int, height: int):
#     print(f"Периметр прямоугольника, равен {(width + height) * 2}")
#
#
# width_in, height_in = map(int, input().split())
# set_perimeter(width_in, height_in)






'''
        Подвиг 8. 
        
        Объявите в программе функцию с одним параметром, которая проверяет корректность 
        переданного ей email-адреса в виде строки. 
        Полагается, что адрес верен, если он обязательно содержит 
        символы '@' и '.', 
        а все остальные символы могут принимать значения: 'a-z', 'A-Z', '0-9' и '_'. 
        Если email верен, то функция выводит "ДА", иначе "НЕТ".
        
        После объявления функции прочитайте (с помощью функции input) 
        строку с email-адресом и вызовите функцию с этим аргументом.
        
        Sample Input:
        
        sc_lib@list.ru
        Sample Output:
        
        ДА
'''
t = {'A', 'E', 'I', 'O', 'U', 'Y', 'B', 'C', 'D', 'F', 'G', 'H', 'J',
     'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V',
     'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8',
     '9', '_', 'a', 'e', 'i', 'o', 'u', 'y', 'b', 'c',
     'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',
     't', 'v', 'w', 'x', 'y', 'z', '@', '.'}



def check_email(email: str):
    marker = False
    if email.count(" ") == 0:
        if (email.count("@") == 1
                and email.count(".") == 1
                and email.index("@") + 1 < email.index(".")):
            for i in set(email):
                if i in t:
                    marker = True
                else:
                    marker = False
                    break
    print(["НЕТ", "ДА"][marker])


email_in = input()
check_email(email_in)

# Вариант 2

import re


def check_email(email):
    regex = r'[A-Za-z0-9_]+@[A-Za-z0-9]+\.[A-Z|a-z]{2,}'
    print('ДА' if re.fullmatch(regex, email) else 'НЕТ')


check_email(input())